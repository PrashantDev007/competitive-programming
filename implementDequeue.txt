https://leetcode.com/problems/design-circular-deque/submissions/

package implementDequeue;

import org.junit.experimental.max.MaxCore;

public class MyDequeue {

	final int MAX_CAPACUTY = 100;
	int size;
	int front;
	int rear;
	int ar[];

	MyDequeue(int size) {
		this.size = size;
		ar = new int[MAX_CAPACUTY];
		front = -1;
		rear = 0;
	}

	boolean isFull() {
		return ((front == 0 && rear == size-1)||
	            front == rear+1);
	}

	void insertfront(int key) {
		if (isFull()) {
			System.out.println("overflow");
			return;
		}
		if (front == -1) {
			front = 0;
			rear = 0;
		} else if (front == 0) {
			front = size - 1;
		} else {
			front--;
		}
		ar[front] = key;
	}

	void insertrear(int key) {

		if (isFull()) {
			System.out.println("overflow");
			return;
		}
		if (front == -1) {
			front = 0;
			rear = 0;
		} else if (rear == size - 1) {
			rear = 0;
		} else {
			rear++;
		}
		ar[rear] = key;

	}

	boolean isEmpty() {
		 return (front == -1);
	}

	void deletefront() {
		if (isEmpty()) {
			System.out.println("underflow");
			return;
		}
		if (front == rear) {
			front = -1;
			rear = -1;
		} else if (front == size - 1)
			front = 0;

		else
			front++;

	}

	void deleterear() {
		if (isEmpty()) {
			System.out.println("underflow");
			return;
		}
		if (front == rear) {
			front = -1;
			rear = -1;
		} else if (rear == 0)
			rear = size - 1;

		else
			rear--;
		

	}

	int getFront() {
		if (isEmpty())
			return -1;

		return ar[front];
	}

	int getRear() {
		if (isEmpty() || rear < 0)
			return -1;

		return ar[rear];
	}

}
