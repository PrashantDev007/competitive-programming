https://leetcode.com/problems/trapping-rain-water/
package gsIncubation;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;

public class Test {

	public static int trap(int[] height) {
		int length = height.length;
		int leftMax[] = new int[length];
		int rightMax[] = new int[length];

		int currentLeftMax = 0;
		int currentRightMax = 0;

		for (int i = 1; i < height.length; i++) {

			currentLeftMax = Math.max(currentLeftMax, height[i - 1]);
			currentRightMax = Math.max(currentRightMax, height[length - i]);
			leftMax[i] = currentLeftMax;
			rightMax[length - i - 1] = currentRightMax;

		}
		int ans = 0;
		currentLeftMax = 0;
		for (int i = 0; i < height.length; i++) {
			ans = ans + Math.max(0, Math.min(currentLeftMax, rightMax[i]) - height[i]);
			currentLeftMax = Math.max(height[i], currentLeftMax);

		}

		return ans;

	}
	
	public static int withoutSpace(int[] height) {
		
		int start=0,end=height.length-1;
		int currentLeftMax = 0;
		int currentRightMax = 0;
		int ans=0;
		while(start<end) {
			
			if(height[start]>=	height[end]) {
			if( height[end]<currentRightMax ) {
				ans=ans+currentRightMax-height[end];
			}	else {
				currentRightMax=Math.max(currentRightMax, height[end]);
			}
			end--;
			}
			else {
				if(height[start]<currentLeftMax ) {ans=ans+currentRightMax-height[start];}
				else {currentLeftMax=Math.max(currentLeftMax, height[start]);}
			start++;
			}
			
		
		}
		
		return ans;
	}

	public static void main(String[] args) {

		System.out.println(trap(new int[] { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 }));
		System.out.println(withoutSpace(new int[] { 0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1 }));

	}
}












