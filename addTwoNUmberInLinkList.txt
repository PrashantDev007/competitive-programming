https://leetcode.com/problems/add-two-numbers/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     if(l1==null&&l2==null)return null;
        int sum=0;
        int carry=0;
        ListNode nextNode=null;
        ListNode newNode=new ListNode();
        ListNode newStart=newNode;
        ListNode prev=null;
        while(l1!=null&&l2!=null)
        {
            prev=newNode;
            sum=l1.val+l2.val+carry;
        
            if(sum>=10){
            newNode.val=sum%10;
                carry=1;
                }
            else{
                newNode.val=sum;
                carry=0;
            }
            nextNode=new ListNode();
            newNode.next=nextNode;
            newNode=nextNode;
        
            l1=l1.next;
            l2=l2.next;
        
        }
        
        while(l1!=null){
        prev=newNode;
            if(l1.val+carry>=10){
            newNode.val=(l1.val+carry)%10;
                carry=1;
                }
            else{
                newNode.val=l1.val+carry;
                carry=0;
            }
            nextNode=new ListNode();
            newNode.next=nextNode;
            newNode=nextNode;

            l1=l1.next;
            
        }
        
        while(l2!=null){
            prev=newNode;
            if(l2.val+carry>=10){
            newNode.val=(l2.val+carry)%10;
                carry=1;
                }
            else{
                newNode.val=l2.val+carry;
                carry=0;
            }
            nextNode=new ListNode();
            newNode.next=nextNode;
            newNode=nextNode;
            
            l2=l2.next;
        }
        if(carry!=0){
           prev=newNode;
            newNode.val=carry;
            nextNode=new ListNode();
            newNode.next=nextNode;
            newNode=nextNode;
        }
        if(prev!=null)prev.next=null;
        return newStart;
    }
}