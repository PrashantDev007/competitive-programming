package gsIncubation;

import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;

public class CountLegthOfCycle {

	private static int findLoop(int[] givenArray) {
	    int counterArray [] = new int[givenArray.length];
	    int index = 0;
	    int counter = 0;
	    while(counterArray[index] == 0){
	       counterArray[index] = counter++;
	        index = givenArray[index];
	    }
	    return counter-counterArray[index];
	}
	
	
	
	
	//when repeatition is not allowed;
	public static int countLengthofcycle2(int arr[], int startIndex) {
		int prevSlow=0;
		if (arr == null || arr.length == 0)
			return -1;

		int slow = arr[startIndex];
		int fast = arr[arr[startIndex]];
		int count = 1;
		if (slow == fast)
			return -1;
		while (slow != fast) {

			if (fast >= arr.length)
				return -1;

			count++;
			prevSlow=fast;
			slow = arr[slow];
			fast = arr[arr[fast]];
			System.out.println(slow+"   "+fast);
		}
		return count;

	}


	//when repeatition is allowed;
	public static int countLengthofcycle(int arr[], int startIndex) {
		if (startIndex >= arr.length)
			return -1;
		Deque<Integer> q = new LinkedList<Integer>();

		int j = startIndex;

		int tmp = arr[j];

		while (tmp < arr.length && tmp >= 0) {
			q.addLast(j);

			if (arr[j] == 0)
				arr[j] = -1;
			else
				arr[j] = arr[j] * -1;

			j = tmp;
			tmp = arr[tmp];

		}

		if (tmp >= arr.length)
			return -1;
		else {
			while (!q.isEmpty() && q.peekFirst() != j)
				q.removeFirst();
		}

	
		if (q.size() == 1)
			return -1;
		
		return q.size();

	}

	public static void main(String[] args) {
		System.out.println( findLoop(new int[] {1,2,0}));
		System.out.println(countLengthofcycle2(new int[] {0}, 0));
		System.out.println(countLengthofcycle(new int[] {0}, 0));
		
	
		
	}
}


