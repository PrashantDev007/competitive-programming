package gsIncubation;
import java.util.HashMap;
import java.util.Map;

 

public class LargestTree  {
    public static Integer solution(final Map<Integer, Integer> immediateParent) {
        if(null == immediateParent || 0 == immediateParent.size())
            return null;
        
        Map<Integer, Integer> treeSize = new HashMap<Integer, Integer>();
        
        for(Integer key : immediateParent.keySet()) {
            Integer root = immediateParent.get(key);
            while(immediateParent.containsKey(root)) {
                root = immediateParent.get(root);
            }
            
            Integer size = treeSize.get(root);
            if(null == size)
                treeSize.put(root, 2);
            else
                treeSize.put(root, size + 1);
        }
        
        int lgTreeSize = 0;
        int lgTreeRoot = -1;
        
        for(Integer root : treeSize.keySet()) {
            int size = treeSize.get(root);
            if(size > lgTreeSize) {
                lgTreeSize = size;
                lgTreeRoot = root;
            } else if(size == lgTreeSize && root < lgTreeRoot) {
                lgTreeRoot = root;
            }
        }
        System.out.println(lgTreeSize+"==");
        
        return lgTreeRoot;
    }
    public static void main(String[] args) {
    	HashMap<Integer, Integer>h=new HashMap<Integer, Integer>();
    	h.put(2, 8);
    	h.put(3, 8);
    	h.put(4, 3);
    	
    	h.put(7, 1);
    	h.put(6, 1);
    	h.put(5, 9);
    	h.put(77, 9);
    
    	h.put(9, 6);
    	
    	
    	System.out.println( solution(h) );
	}
}